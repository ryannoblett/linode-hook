#!/bin/sh

# linode-hook
# https://github.com/ryannoblett/linode-hook
# usage:
# $script  OPERATION  DOMAIN  ignored  CHALLENGETOKEN

# Configuration

# hosts to deploy certificates to
HOSTS="$(cat hosts)"

# location to deploy certificates on destination servers
DEPLOYPATH="/etc/ssl/letsencrypt"

# path to dehydrated script (defaults to location of linode-hook script)
MY_PATH="$( cd -P "$( dirname "$0" )" && pwd )"

# API key (defaults to file .apikey in $MYPATH location)
MY_API_KEY=$(cat $MY_PATH/.apikey 2>/dev/null)

# Linode API URL
LINODE_API4_URL="https://api.linode.com/v4"


# Linode API functions

# Retrieves a list of domains in your linode DNS manager.
list_domains() {
        GET=$(curl --silent $LINODE_API4_URL/domains -H "Authorization: Bearer ${MY_API_KEY}" -H "Content-Type: application/json")
        if [ ".$GET" != "." ]
        then
                echo "$GET" | jq -a '.'
        else
                echo ""
        fi
}

# Retrieves a list of resources (i.e. subdomains) for a particular domain.
# @param Domain ID
list_resources() {
        [ $# -ne 1 ] && {
                echo "Usage: list_resources DomainID" 1>&2;
                exit 1;
        }
        GET=$(curl --silent $LINODE_API4_URL/domains/$1/records -H "Authorization: Bearer ${MY_API_KEY}" -H "Content-Type: application/json")
        if [ ".$GET" != "." ]
        then
                echo "$GET" | jq -a '.'
        else
                echo ""
        fi
}

# Updates a domain resource.
# @param Domain ID
# @param Resource ID
update_resource_target() {
        [ $# -ne 3 ] && {
                echo "Usage: update_resource_target domainid resourceid challengetoken" 1>&2;
                exit 1;
        }
        echo $(curl --silent -g $LINODE_API4_URL/domains/$1/records/$2 -H "Authorization: Bearer ${MY_API_KEY}" -H "Content-Type: application/json" -X POST -d "{ \"ttl_sec\": 300, \"target\": \"$3\" }")
}

# Creates a domain resource.
# @param Domain ID
create_resource_target() {
        [ $# -ne 3 ] && {
                echo "Usage: create_resource_target domainid resource challengetoken" 1>&2;
                exit 1;
        }
        echo $(curl --silent -g $LINODE_API4_URL/domains/$1/records -H "Authorization: Bearer ${MY_API_KEY}" -H "Content-Type: application/json" -X POST -d "{ \"type\": \"TXT\", \"name\": \"$2\", \"ttl_sec\": 300, \"target\": \"$3\" }")
}

# Deletes a domain resource.
# @param Domain ID
# @param Resource ID
delete_resource_target() {
        [ $# -ne 2 ] && {
                echo "Usage: delete_resource_target domainid resourceid" 1>&2;
                exit 1;
        }
        echo $(curl --silent -g $LINODE_API4_URL/domains/$1/records/$2 -H "Authorization: Bearer ${MY_API_KEY}" -H "Content-Type: application/json" -X DELETE)
}

process_domain() {
        DOMAIN=$(list_domains | jq ".data[] | select(.domain==\"$FULL_DOMAIN\") | .domain" | tr -d \")
        DOMAINSTUB=${FULL_DOMAIN}
        while [ "x" = "x$DOMAIN" ]
        do
                DOMAINSTUB=${DOMAINSTUB#*.}
                if [ "x" != "x$DOMAINSTUB" ]
                then
                        DOMAIN=$(list_domains | jq ".data[] | select(.domain==\"$DOMAINSTUB\") | .domain" | tr -d \")
                else
                        echo "Parent domain not found for $FULL_DOMAIN"
                        exit 1
                fi
        done
        TLD=${FULL_DOMAIN##*.}
        SUBDOMAIN=${FULL_DOMAIN%%$DOMAIN*}
        RESOURCE="_acme-challenge.${SUBDOMAIN}"
        RESOURCE=${RESOURCE%.*}
        DOMAIN_ID=$(list_domains | jq ".data[] | select(.domain==\"$DOMAIN\") | .id" | tr -d \")
        if [ ".$DOMAIN_ID" != "." ]
        then
                RESOURCE_ID=$(list_resources $DOMAIN_ID | jq -r ".data[] | select(.type==\"TXT\") | select(.name==\"$RESOURCE\") | .id" | tr -d \")
        fi
}

verify_change() {
        echo "Verifying..."
        #set -x
        servers="8.8.8.8 8.8.4.4 1.1.1.1"
        i=0
        j=0
        RESULT=""
        until [ ".$RESULT" != "." ]
        do
                server=$(echo $servers | cut -d\  -f${i})
                RESULT=$(dig @$server TXT $1 +noall +answer | grep IN | grep \"$2\"$)
                sleep 60
                i=$((i+1))
                if [ $i -gt $(echo $servers | awk '{print NF}') ]
                then
                        i=0
                fi
                j=$((j+1))
                if [ $j -ge 30 ]
                then
                        echo "$j attempts failed. Timed out."
                        break
                fi
        done
        #set +x
}

clean_challenge() {
        process_domain
        if [ ".$DOMAIN_ID" != "." ]
        then
                if [ ".$RESOURCE_ID" != "." ]
                then
                        delete_resource_target $DOMAIN_ID $RESOURCE_ID
                else
                        echo "No such resource: nothing to do."
                fi
        else
                echo "Domain ID not found."
        fi
}

deploy_challenge() {
        process_domain
        if [ ".$DOMAIN_ID" != "." ]
        then
                if [ ".$RESOURCE_ID" != "." ]
                then
                        update_resource_target $DOMAIN_ID $RESOURCE_ID $CHALLENGE
                else
                        create_resource_target $DOMAIN_ID $RESOURCE $CHALLENGE
                fi
                verify_change $RESOURCE.$DOMAIN $CHALLENGE
        else
                echo "Domain ID not found."
        fi
}

deploy_cert() {
        for HOST in $HOSTS
        do
                if ssh $HOST "[ -d $DEPLOYPATH/$FULL_DOMAIN ]"
                then
                        echo " + Deploying certificate to $HOST... "
                        rsync -a $CERTDIR/$FULL_DOMAIN/. $HOST:$DEPLOYPATH/$FULL_DOMAIN/. && echo " + Succeeded!" || echo " + Failed!"
                fi
        done
}

invalid_challenge() {
        echo "Not yet implemented: invalid_challenge"
}

request_failure() {
        echo "Not yet implemented: request_failure"
}

startup_hook() {
        true
}

exit_hook() {
        true
}

unchanged_cert() {
        true
}

sync_cert() {
        true
}

generate_csr() {
        true
}

debug() {
        while true
        do
                echo -n "> "
                read input
                $input
                echo ""
        done
}

##### DO IT

# Parameters
OPERATION=$1
shift

while [ "x" != "x$3" ]
do
        FULL_DOMAIN=$1
        CHALLENGE=$3
        if [ "x$OPERATION" != "x" ]
        then
                if [ "x$(grep $OPERATION\(\)\ \{$ $0)" != "x" ]
                then
                        $OPERATION &
                        sleep 0.1
                else
                        exit 1
                fi
        fi
        shift 3
done
wait
exit 0
